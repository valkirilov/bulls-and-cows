"use strict";

angular.module("myApp", [ "ui.router", "ngCookies", "ngAnimate", "myApp.guest", "myApp.profile", "myApp.game", "myApp.version", "myApp.services", "firebase", "ui.bootstrap", "ipCookie", "gettext" ]).controller("GlobalController", [ "$scope", "$rootScope", "$location", "gettextCatalog", "$firebaseAuth", "AuthService", "GameService", function(a, b, c, d, e, f, g) {
    a.lang = "en", b.firebaseRefURL = "https://bulls-and-cows-game.firebaseio.com/", 
    b.firebaseRef = null, b.user = null, b.isGamesListLoaded = !1;
    var h = function() {
        b.firebaseRef = new Firebase(b.firebaseRefURL), f.init(b.firebaseRef), f.check(), 
        g.init(b.firebaseRef);
    };
    a.setLanguage = function(b) {
        a.lang = b, d.currentLanguage = b;
    }, a.logout = function() {
        f.logout();
    }, h();
} ]).run([ "$rootScope", "$state", "$stateParams", function(a, b, c) {
    a.$state = b, a.$stateParams = c;
} ]).config([ "$stateProvider", "$urlRouterProvider", function(a, b) {
    b.otherwise("/");
} ]), angular.module("myApp.guest", [ "ui.router" ]).config([ "$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("login", {
        url: "/login",
        templateUrl: "./scripts/guest/login.html",
        controller: "GuestCtrl"
    });
} ]).controller("GuestCtrl", [ "$rootScope", "$scope", "AuthService", function(a, b, c) {
    var d = function() {};
    b.login = function() {
        b.isLogging = !0, b.loginError = {};
        var a = {
            email: angular.copy(b.loginInput.email),
            password: angular.copy(b.loginInput.password)
        }, d = c.login(a);
        d.then(function(a) {
            b.isLogging = !1;
        }, function(a) {
            b.isLogging = !1, "INVALID_EMAIL" === a ? b.loginError.email = !0 : "INVALID_PASSWORD" === a ? b.loginError.password = !0 : (b.loginError.other = "" + a, 
            (b.loginError.other.indexOf("email") > -1 || b.loginError.other.indexOf("user") > -1) && (b.loginError.email = !0), 
            b.loginError.other.indexOf("password") > -1 && (b.loginError.password = !0));
        });
    }, d();
} ]), angular.module("myApp.profile", [ "ui.router" ]).config([ "$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("logout", {
        url: "/logout",
        templateUrl: "./scripts/profile/logout.html",
        controller: "ProfileCtrl"
    }).state("profile", {
        url: "/profile",
        templateUrl: "./scripts/profile/profile.html",
        controller: "ProfileCtrl"
    });
} ]).controller("ProfileCtrl", [ "$rootScope", "$scope", "AuthService", function(a, b, c) {
    var d = function() {};
    d();
} ]), angular.module("myApp.game", [ "ui.router" ]).config([ "$stateProvider", "$urlRouterProvider", function(a, b) {
    a.state("game-new", {
        url: "/game/new",
        templateUrl: "./scripts/game/new.html",
        controller: "GameCtrl"
    }).state("game-multyplayer", {
        url: "/game/multyplayer/{gameId:[a-zA-Z0-9_-]+}",
        templateUrl: "./scripts/game/multyplayer.html",
        controller: "GameCtrl"
    });
} ]).controller("GameCtrl", [ "$rootScope", "$scope", "$stateParams", "AuthService", "GameService", function(a, b, c, d, e) {
    function f(a) {
        return !isNaN(parseFloat(a)) && isFinite(a);
    }
    b.friendsList = null;
    var g = function() {
        b.friendsList = d.getFriends(), "game-multyplayer" === a.$state.current.name && (a.isGamesListLoaded ? a.initGame(a.$state.params.gameId) : a.initGameAfterLoad = !0);
    };
    b.checkNewGameNumberInput = function(a) {
        h(b[a].number) ? b[a].isNumberValid = !0 : b[a].isNumberValid = !1;
    }, b.visible = !0, b.test = function() {
        b.visible = !b.visible, console.log(b.visible);
    }, b.choosePlayer = function(a) {
        b.newGame.oponent = a.name, b.selectedPlayer(a);
    }, b.checkPlayer = function() {
        var a = !1;
        b.friendsList.forEach(function(c) {
            b.newGame.oponent === c.name && (a = !0);
        }), b.newGame.isOponentValid = a;
    }, b.selectedPlayer = function(a) {
        b.newGame.isOponentValid = !0;
        var c = d.getPlayerFromUser(a);
        b.newGame.players = {
            1: null,
            2: c
        };
    }, b.startNewGame = function() {
        b.newGame.status = 0;
        var c = d.getPlayerFromUser(a.user);
        c.number = b.newGame.number, b.newGame.players[1] = c, b.newGame.winner = 0, b.newGame.turn = 0, 
        delete b.newGame.number, delete b.newGame.isNumberValid, delete b.newGame.isOponentValid, 
        delete b.newGame.oponent, e.newGame(b.newGame);
    }, b.acceptNewGame = function(a, b) {
        a.gameRef.status = 1, a.gameRef.turn = 2, a.gameRef.players[2].number = b.number, 
        e.updateGameState(a.gameRef);
    }, b.checkNumber = function(a, c) {
        if (h(c)) {
            var d = e.checkNumber(a, c), f = {
                number: c,
                result: d
            };
            a.gameRef.players[a.player].attempts.push(f), a.gameRef.turn = a.oponent, b.checkNumberInput = "", 
            4 === d.bulls && (console.log("Winner"), a = e.calculateEndOfGame(a)), e.updateGameState(a.gameRef);
        }
    }, a.initGame = function(a) {
        b.game = e.loadGame(a);
    }, b.$on("$routeChangeSuccess", function(b, c) {
        "game-multyplayer" === a.$state.current.name && a.initGame(a.$state.params.gameId);
    });
    var h = function(a) {
        return 4 === a.toString().length && f(a) ? !0 : !1;
    };
    g();
} ]), angular.module("myApp.services", [ "myApp.services.auth", "myApp.services.game" ]), 
angular.module("myApp.services.auth", []).factory("AuthService", [ "$http", "ipCookie", "$firebaseAuth", "$firebaseArray", "$firebaseObject", "$location", "$rootScope", function(a, b, c, d, e, f, g) {
    function h(a) {
        switch (a.provider) {
          case "password":
            return a.password.email.replace(/@.*/, "");

          case "twitter":
            return a.twitter.displayName;

          case "facebook":
            return a.facebook.displayName;
        }
    }
    var i, j, k, l, m, n = !1, o = function(a, b) {
        i = a, k = c(i), i.onAuth(function(b) {
            if (b && n) {
                var c = new Date();
                a.child("users").child(b.uid).set({
                    uid: b.uid,
                    provider: b.provider,
                    name: h(b),
                    registered: c,
                    xp: 100,
                    level: 1,
                    nextLevel: A(1),
                    avatar: b.password.profileImageURL,
                    email: b.password.email,
                    gamesWon: 0,
                    gamesLost: 0,
                    badge: "Beginer",
                    notifications: {
                        empty: "empty"
                    },
                    games: {
                        empty: "empty"
                    }
                });
            }
        }), j = a.child("users"), l = d(j), l.$loaded(function(a) {
            m = a.filter(function(a) {
                return a.uid !== g.user.uid ? !0 : void 0;
            });
        });
    }, p = function(a) {
        var b = k.$getAuth();
        if (a = a || !1, b) {
            console.log("Logged in as:", b.uid), a && f.path("/profile");
            var c = i.child("users").child(b.uid), d = e(c);
            d.$loaded(function(a) {
                g.user = a, g.user.progress = parseInt(a.xp / a.nextLevel * 100);
            });
        } else console.log("Logged out"), f.path("/login");
    }, q = function(a) {
        var b = k.$authWithPassword({
            email: a.email,
            password: a.password
        });
        return b.then(function(a) {
            console.log("Logged in as:", a.uid), p(!0);
        })["catch"](function(a) {
            console.info("Authentication failed:", a);
        }), b;
    }, r = function() {
        k.$unauth(), f.path("/login");
    }, s = function(a) {
        n = !0;
        var b = k.$createUser({
            email: a.email,
            password: a.password
        });
        return b.then(function(a) {
            console.log("User " + a.uid + " created successfully!"), q();
        }).then(function(a) {
            console.log("Logged in as:", a.uid);
        })["catch"](function(a) {
            console.error("Error: ", a);
        }), b;
    }, t = function() {
        return m;
    }, u = function(a) {
        var b = a.userTo, c = i.child("users").child(b).child("notifications"), e = d(c);
        e.$add(a);
    }, v = function(a, b) {
        var c = i.child("users").child(a).child("games"), e = d(c);
        e.$add(b);
    }, w = function(a) {
        var b = {
            uid: a.uid,
            name: a.name,
            level: a.level,
            avatar: a.avatar,
            badge: a.badge
        };
        return b;
    }, x = function(a, b, c) {
        c = c || !1;
        var d = l.$getRecord(a);
        d.xp += b, d.level = z(d.xp), d.nextLevel = A(d.level), c && (g.user.progress = parseInt(d.xp / d.nextLevel * 100)), 
        l.$save(d);
    }, y = {
        1: 1e3,
        2: 2500,
        3: 5e3,
        4: 7500,
        5: 1e4,
        6: 15e3,
        7: 21e3,
        8: 27e3,
        9: 35e3,
        10: 35e3
    }, z = function(a) {
        return a < y[1] ? 1 : a < y[2] ? 2 : a < y[3] ? 3 : a < y[4] ? 4 : a < y[5] ? 5 : a < y[6] ? 6 : a < y[7] ? 7 : a < y[8] ? 8 : a < y[9] ? 9 : a >= y[9] ? 10 : void 0;
    }, A = function(a) {
        return y[a];
    };
    return {
        init: o,
        check: p,
        login: q,
        logout: r,
        register: s,
        getFriends: t,
        sendGameNotification: u,
        addNewGame: v,
        getPlayerFromUser: w,
        updatePlayerXp: x,
        getNextLevelXp: A,
        getLevelForXp: z
    };
} ]), angular.module("myApp.services.game", []).factory("GameService", [ "$rootScope", "$http", "ipCookie", "$firebaseObject", "$firebaseArray", "$location", "AuthService", function(a, b, c, d, e, f, g) {
    var h, i, j = function(b) {
        h = b.child("games"), i = e(h), i.$loaded(function(b) {
            a.isGamesListLoaded = !0, a.initGameAfterLoad && a.initGame(a.$state.params.gameId);
        });
    }, k = function(a) {
        var b = [];
        b.push(1), a.players[1].attempts = a.players[2].attempts = b;
        var c = i.$add(a);
        c.then(function(b) {
            var c = b.key();
            a.id = c;
            var d = {
                userTo: a.players[2].uid,
                userFrom: a.players[1].uid,
                type: "new-game",
                isRead: !1,
                info: {
                    gameId: c
                }
            };
            g.sendGameNotification(d);
            var e = r(a);
            g.addNewGame(a.players[1].uid, e), g.addNewGame(a.players[2].uid, e), f.path("/game/multyplayer/" + c);
        });
    }, l = function(a) {
        var b = i.$getRecord(a), c = {
            gameRef: b
        };
        return c.player = p(b), c.oponent = q(b), c.isYourTurn = c.gameRef.turn === c.player, 
        c;
    }, m = function(a) {
        i.$save(a);
    }, n = function(a) {
        a.gameRef.turn = 3, a.gameRef.winner = a.player, a.gameRef.status = 2;
        var b = 600, c = 200, d = a.gameRef.players[a.player].attempts.length, e = a.gameRef.players[a.oponent].level - a.gameRef.players[a.player].level, f = b + d + (e > 0 ? 50 * e : 0), h = a.gameRef.players[a.oponent].attempts.length, i = c + h;
        return a.gameRef.players[a.player].xpGained = f, a.gameRef.players[a.oponent].xpGained = i, 
        g.updatePlayerXp(a.gameRef.players[a.player].uid, f), g.updatePlayerXp(a.gameRef.players[a.oponent].uid, i), 
        a;
    }, o = function(a, b) {
        var c = a.gameRef.players[a.oponent].number.toString(), d = b.toString(), e = {
            bulls: 0,
            cows: 0
        };
        d[0] == c[0] && (e.bulls++, d = d.replaceAt(0, "x"), c = c.replaceAt(0, "x")), d[1] == c[1] && (e.bulls++, 
        d = d.replaceAt(1, "x"), c = c.replaceAt(1, "x")), d[2] == c[2] && (e.bulls++, d = d.replaceAt(2, "x"), 
        c = c.replaceAt(2, "x")), d[3] == c[3] && (e.bulls++, d = d.replaceAt(3, "x"), c = c.replaceAt(3, "x"));
        var f, g, h, i = [];
        for (f = 0; f < d.length; f++) if ("x" !== d[f] && !(i.indexOf(d[f]) > -1)) {
            for (g = 0, h = 0, g = 0; g < c.length; g++) d[f] == c[g] && h++;
            e.cows += h;
        }
        return e;
    }, p = function(b) {
        return b.players[1].uid === a.user.uid ? 1 : b.players[2].uid === a.user.uid ? 2 : -1;
    }, q = function(b) {
        return b.players[2].uid === a.user.uid ? 1 : b.players[1].uid === a.user.uid ? 2 : -1;
    }, r = function(a) {
        return {
            id: a.id,
            players: {
                1: a.players[1],
                2: a.players[2]
            },
            status: a.status,
            winner: a.winner,
            turn: a.turn
        };
    };
    return String.prototype.replaceAt = function(a, b) {
        return this.substr(0, a) + b + this.substr(a + b.length);
    }, {
        init: j,
        newGame: k,
        loadGame: l,
        updateGameState: m,
        checkNumber: o,
        calculateEndOfGame: n
    };
} ]), angular.module("myApp.version", [ "myApp.version.interpolate-filter", "myApp.version.version-directive" ]).value("version", "0.1"), 
angular.module("myApp.version.version-directive", []).directive("appVersion", [ "version", function(a) {
    return function(b, c, d) {
        c.text(a);
    };
} ]), angular.module("myApp.version.interpolate-filter", []).filter("interpolate", [ "version", function(a) {
    return function(b) {
        return String(b).replace(/\%VERSION\%/gm, a);
    };
} ]), angular.module("gettext").run([ "gettextCatalog", function(a) {
    a.setStrings("bg", {
        "Bootstrap starter template": "Добре долши!"
    });
} ]);
//# sourceMappingURL=app.min.js.map